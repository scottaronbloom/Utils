// The MIT License( MIT )
//
// Copyright( c ) 2020-2021 Scott Aron Bloom
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files( the "Software" ), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sub-license, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions :
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

#ifndef __VERSION_H
#define __VERSION_H

#include <string>
#ifdef QT_VERSION
#include <QString>
#include <QDateTime>
#endif

namespace NVersion
{
    inline const int         MAJOR_VERSION    =  @VERSION_FILE_MAJOR_VERSION@;
    inline const int         MINOR_VERSION    =  @VERSION_FILE_MINOR_VERSION@;
    inline const std::string PATCH_VERSION    = "@VERSION_FILE_PATCH_VERSION@"; // string from git

#cmakedefine VERSION_FILE_DIFF
#ifdef VERSION_FILE_DIFF
    inline const bool        MODIFIED         =  @VERSION_FILE_DIFF@;
#else
    inline const bool        MODIFIED         =  false;
#endif

    inline const std::string APP_NAME         = "@VERSION_FILE_APP_NAME@";
#cmakedefine VERSION_FILE_VENDOR
#ifdef VERSION_FILE_VENDOR
    inline const std::string VENDOR           = "@VERSION_FILE_VENDOR@";
#endif

#cmakedefine VERSION_FILE_HOMEPAGE
#ifdef VERSION_FILE_HOMEPAGE
    inline const std::string HOMEPAGE         = "@VERSION_FILE_HOMEPAGE@";
#endif

#cmakedefine VERSION_FILE_PRODUCT_HOMEPAGE
#ifdef VERSION_FILE_PRODUCT_HOMEPAGE
    inline const std::string PRODUCT_HOMEPAGE = "@VERSION_FILE_PRODUCT_HOMEPAGE@";
#endif

#cmakedefine VERSION_FILE_EMAIL
#ifdef VERSION_FILE_EMAIL
    inline const std::string EMAIL            = "@VERSION_FILE_EMAIL@";
#endif

#cmakedefine VERSION_FILE_BUILD_DATE
#ifdef VERSION_FILE_BUILD_DATE
    inline const std::string BUILD_DATE       = std::string( "@VERSION_FILE_BUILD_DATE@" ) + "Z"; // IN UTC
#endif

#cmakedefine VERSION_FILE_BUILD_TIME
#ifdef VERSION_FILE_BUILD_TIME
    inline const std::string BUILD_TIME       = std::string( "@VERSION_FILE_BUILD_TIME@" ) + "Z"; // IN UTC
#endif

#if defined( VERSION_FILE_BUILD_DATE ) && defined( VERSION_FILE_BUILD_TIME )
#ifdef QT_VERSION
    inline QDateTime buildDateTime()
    { 
        auto retVal = QDateTime::fromString( QString::fromStdString( NVersion::BUILD_DATE + " " + NVersion::BUILD_TIME ), "MM/dd/yyyyZ HH:mm:ssZ" );
        retVal.setTimeSpec( Qt::TimeSpec::UTC );
        return retVal;
    }
#endif
#endif

    inline std::string getVersionString(bool full) 
    { 
        auto retVal = std::to_string( MAJOR_VERSION ) + ".";
#cmakedefine VERSION_FILE_FORCE_TWODIGITS_MINOR
#ifdef VERSION_FILE_FORCE_TWODIGITS_MINOR
        if ( MINOR_VERSION < 10 )
            retVal += '0';
#endif
        retVal += std::to_string( MINOR_VERSION );
        if ( full )
            retVal += "." + PATCH_VERSION;
        if ( MODIFIED )
            retVal += "*";
        if ( !BUILD_DATE.empty() )
            retVal += " Build Date: " + BUILD_DATE;
        return retVal;
    }

    inline std::string getWindowTitle() 
    { 
        auto retVal = APP_NAME + " v" + getVersionString( true ) + " - http://" + HOMEPAGE;
        return retVal;
    }
}

#endif

